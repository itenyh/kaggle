# create_hdf5()


#size = 35, 158s

store = pd.HDFStore('train.h5')

nrows = store.get_storer('all_train').nrows
print_type(nrows)

r = np.random.randint(0,nrows,size=2)
# print(r)

now = time.time()
#
print_type(pd.read_hdf('train.h5', 'all_train', where="index=r"))
#
print 'Time Cost : %f' % (time.time() - now)


'''
index = pd.date_range('1/1/2000', periods=8)
store = pd.HDFStore('store.h5')
df = pd.DataFrame(np.random.randn(8, 3),index=index,columns=['A', 'B', 'C'])

# store['df'] = df
print_type(store)
print store.select('df',where='A<0')

store.close()
'''

'''
# df = pd.DataFrame(np.random.randn(100,2),columns=['A','B'])
df.to_hdf('test.h5', 'df', format='table', data_columns=True)
store = pd.HDFStore('test.h5')
nrows = store.get_storer('df').nrows
# store.append('df', data)
r = np.random.randint(0,nrows,size=10)
# print_type(r)
print_type(pd.read_hdf('test.h5', 'df', where="index=r & 'A'>0"))
'''

'''
store = pd.HDFStore('train.h5', mode='r+')
print_type(store.select_column('df', 1))
# rh = pd.read_hdf('train.h5', 'table')
# print_type(rh)
'''

'''
store = pd.HDFStore('train.h5', mode='r+')

reader = pd.read_csv('./train.csv', chunksize = 1000000)

for i, chunk in enumerate(reader):

    if(i > 2):
        break
    store.append('df', chunk)
    print(i)

store.close()
'''

'''
df = pd.DataFrame(np.random.randn(11, 4), columns=list('ABCD'))
s_index = np.random.choice(df.index.values, 10, replace=False)

print_type(df.ix[s_index])
print_type(df.drop(s_index))
'''


          row_id       x    y  accuracy        time
343       8.3762  8.6447   61    685120  9080913808
2335      2.1769  9.2340  168    596605  4791260684

         row_id       x       y  accuracy    time    place_id
0           343  8.3762  8.6447        61  685120  9080913808
1          2335  2.1769  9.2340       168  596605  4791260684

# train = pd.read_csv('./train.csv')
# test = pd.read_csv('./test.csv')

Validate In row: 0.185000
Elapsed time cell: 108.412714958 seconds == x:1.400000 ~ 1.600000 y:1.400000 ~ 1.600000
Validate In row: 0.062771
Elapsed time cell: 136.839164972 seconds == x:1.400000 ~ 1.600000 y:4.600000 ~ 4.800000


row_id       x       y  accuracy  time    place_id  hour  weekday  \
77104  21295407  1.5136  1.5957        52   234  6151484656     4        1
67995  18777278  1.5315  1.5461        22   302  2767122477     6        1
87390  24231028  1.4866  1.5979        66   386  6151484656     7        1
51314  14176943  1.5213  1.5960        62   397  6151484656     7        1
93292  25828582  1.5156  1.5958       118   732  2074016136    13        1
24763   6824926  1.4816  1.5646       162   908  2431369260    16        1
75318  20807015  1.5417  1.4019        69  1207  4646500666    21        1
76589  21152834  1.5340  1.4144         6  1220  4646500666    21        1
44428  12250802  1.5697  1.5245        11  1578  2767122477     3        2
37761  10387069  1.4268  1.4400        61  1656  5239822919     4        2


====================

         row_id       x       y  accuracy  time    place_id  hour  weekday  \
77104  21295407  1.5136  1.5957        52   234  6151484656     4        1
67995  18777278  1.5315  1.5461        22   302  2767122477     6        1
87390  24231028  1.4866  1.5979        66   386  6151484656     7        1
51314  14176943  1.5213  1.5960        62   397  6151484656     7        1
93292  25828582  1.5156  1.5958       118   732  2074016136    13        1
24763   6824926  1.4816  1.5646       162   908  2431369260    16        1
75318  20807015  1.5417  1.4019        69  1207  4646500666    21        1
76589  21152834  1.5340  1.4144         6  1220  4646500666    21        1
44428  12250802  1.5697  1.5245        11  1578  2767122477     3        2
37761  10387069  1.4268  1.4400        61  1656  5239822919     4        2

////////////////////

 x       y  accuracy  time  hour  weekday  month  year
77104  1.5136  1.5957        52   234     4        1      1     1
67995  1.5315  1.5461        22   302     6        1      1     1
87390  1.4866  1.5979        66   386     7        1      1     1
51314  1.5213  1.5960        62   397     7        1      1     1
93292  1.5156  1.5958       118   732    13        1      1     1
24763  1.4816  1.5646       162   908    16        1      1     1
75318  1.5417  1.4019        69  1207    21        1      1     1
76589  1.5340  1.4144         6  1220    21        1      1     1
44428  1.5697  1.5245        11  1578     3        2      1     1
37761  1.4268  1.4400        61  1656     4        2      1     1
[6151484656 2767122477 6151484656 6151484656 2074016136 2431369260
 4646500666 4646500666 2767122477 5239822919]

===========

 x       y  accuracy  time  hour  weekday  month  year
77104  1.5136  1.5957        52   234     4        1      1     1
67995  1.5315  1.5461        22   302     6        1      1     1
87390  1.4866  1.5979        66   386     7        1      1     1
51314  1.5213  1.5960        62   397     7        1      1     1
93292  1.5156  1.5958       118   732    13        1      1     1
24763  1.4816  1.5646       162   908    16        1      1     1
75318  1.5417  1.4019        69  1207    21        1      1     1
76589  1.5340  1.4144         6  1220    21        1      1     1
44428  1.5697  1.5245        11  1578     3        2      1     1
37761  1.4268  1.4400        61  1656     4        2      1     1
[6151484656 2767122477 6151484656 6151484656 2074016136 2431369260
 4646500666 4646500666 2767122477 5239822919]

 ////////////

 2074016136  2431369260  2767122477  4646500666  5239822919  6151484656
0    0.050000    0.000000    0.083333    0.013333    0.036667    0.816667
1    0.026667    0.023333    0.710000    0.080000    0.006667    0.153333
2    0.023333    0.046667    0.016667    0.000000    0.010000    0.903333
3    0.076667    0.000000    0.030000    0.013333    0.020000    0.860000
4    0.656667    0.143333    0.010000    0.023333    0.000000    0.166667
5    0.183333    0.683333    0.026667    0.040000    0.006667    0.060000
6    0.046667    0.030000    0.070000    0.773333    0.030000    0.050000
7    0.016667    0.020000    0.126667    0.806667    0.010000    0.020000
8    0.006667    0.006667    0.726667    0.083333    0.143333    0.033333
9    0.023333    0.073333    0.120000    0.043333    0.646667    0.093333

2074016136  2431369260  2767122477  4646500666  5239822919  6151484656
0    0.056667    0.000000    0.076667    0.000000    0.056667    0.810000
1    0.016667    0.033333    0.706667    0.036667    0.023333    0.183333
2    0.030000    0.010000    0.016667    0.000000    0.020000    0.923333
3    0.070000    0.000000    0.040000    0.000000    0.016667    0.873333
4    0.656667    0.153333    0.000000    0.010000    0.000000    0.180000
5    0.210000    0.656667    0.040000    0.026667    0.013333    0.053333
6    0.036667    0.036667    0.070000    0.810000    0.023333    0.023333
7    0.013333    0.013333    0.123333    0.813333    0.030000    0.006667
8    0.006667    0.010000    0.750000    0.086667    0.123333    0.023333
9    0.023333    0.040000    0.126667    0.090000    0.626667    0.093333

/////////

同样的数据，求得的概率矩阵不同

[[ 0.03666667  0.          0.11333333  0.00333333  0.01666667  0.83      ]
 [ 0.00333333  0.02333333  0.69333333  0.06333333  0.00333333  0.21333333]
 [ 0.01666667  0.02333333  0.02        0.          0.00666667  0.93333333]
 [ 0.04        0.          0.03        0.          0.00333333  0.92666667]
 [ 0.62333333  0.13333333  0.00666667  0.02666667  0.          0.21      ]
 [ 0.19333333  0.65        0.02666667  0.06        0.00666667  0.06333333]
 [ 0.04        0.06333333  0.04333333  0.81333333  0.03333333  0.00666667]
 [ 0.01333333  0.03333333  0.11666667  0.81        0.01666667  0.01      ]
 [ 0.01333333  0.01333333  0.75        0.08333333  0.10666667  0.03333333]
 [ 0.01666667  0.05        0.14        0.06666667  0.65666667  0.07      ]]

[[ 0.04333333  0.          0.08        0.00333333  0.03        0.84333333]
 [ 0.01333333  0.00666667  0.67333333  0.05666667  0.01333333  0.23666667]
 [ 0.03        0.02666667  0.03333333  0.00333333  0.00666667  0.9       ]
 [ 0.04666667  0.          0.05        0.00666667  0.00333333  0.89333333]
 [ 0.62333333  0.14666667  0.01666667  0.02        0.          0.19333333]
 [ 0.14666667  0.69        0.03        0.04        0.00666667  0.08666667]
 [ 0.02666667  0.02666667  0.07        0.78333333  0.04        0.05333333]
 [ 0.01333333  0.01333333  0.13        0.78333333  0.02333333  0.03666667]
 [ 0.01666667  0.00666667  0.73        0.09666667  0.11333333  0.03666667]
 [ 0.02        0.04666667  0.12666667  0.07666667  0.65333333  0.07666667]]

 /////////

 [2074016136, 2431369260, 2767122477, 4646500666, 5239822919, 6151484656]
 [2074016136, 2431369260, 2767122477, 4646500666, 5239822919, 6151484656]

//////////

[[ 0.04        0.          0.07666667  0.00333333  0.04        0.84      ]
 [ 0.01666667  0.01        0.69333333  0.05666667  0.00333333  0.22      ]]

   2074016136  2431369260  2767122477  4646500666  5239822919  6151484656
0    0.040000        0.00    0.076667    0.003333    0.040000        0.84
1    0.016667        0.01    0.693333    0.056667    0.003333        0.22

           0_          1_          2_
0  6151484656  2767122477  5239822919
1  2767122477  6151484656  4646500666

/////////
x       y  accuracy  time  hour  weekday  month  year
77104  1.5136  1.5957        52   234     4        1      1     1
            x       y  accuracy  time  hour  weekday  month  year
77104  1.5136  1.5957        52   234     4        1      1     1
   2074016136  2431369260  2767122477  4646500666  5239822919  6151484656
0    0.046667    0.003333    0.093333    0.003333        0.02    0.833333

x       y  accuracy  time  hour  weekday  month  year
77104  1.5136  1.5957        52   234     4        1      1     1
            x       y  accuracy  time  hour  weekday  month  year
77104  1.5136  1.5957        52   234     4        1      1     1
   2074016136  2431369260  2767122477  4646500666  5239822919  6151484656
0        0.06         0.0    0.056667    0.003333        0.03        0.85

//////
[[ 0.07  0.    0.58  0.05  0.05  0.04  0.07  0.1   0.04]]
[[ 0.06  0.03  0.6   0.09  0.02  0.06  0.04  0.07  0.03]]

/////////////knn plus

dataset: ninegrid_xy.txt
feature: all
validate : 0.5559 0-20%: test ||  20% - end: train
model : knn
nn = 26

-------

dataset: ninegrid_xy.txt
feature: exclude 'accuracy'
validate : 0.5809 0-20%: test ||  20% - end: train
model : knn
nn = 26
-------
dataset: ninegrid_xy.txt
feature: exclude 'accuracy'
validate : 0.5806 0-20%: test ||  20% - end: train
model : bagging-knn
estimator:50
nn = 26
-------
dataset: ninegrid_xy.txt
feature: exclude 'accuracy'
validate : 0.6311 0-20%: test ||  20% - end: train
model : rf
estimator:100
nn = 26

/////////knn_pp
dataset: ninegrid_xy.txt
feature: all
validate : 0.6318 0-20%: test ||  20% - end: train
model : knn => nn = 26
-------
dataset: ninegrid_xy.txt
feature: all
validate : 0.6472 0-20%: test ||  20% - end: train
model : rf => estimator:200
-------
dataset: ninegrid_xy.txt
feature: all
validate : 0.6488 0-20%: test ||  20% - end: train
model : bagging-knn => estimator:50 model:knn -> nn = 26
-------
dataset: ninegrid_xy.txt
feature: all
validate : 0.6482 0-20%: test ||  20% - end: train
model : Voting => rf + bagging
-------
dataset: ninegrid_xy.txt
feature: all
validate : 0.6494 0-20%: test ||  20% - end: train
model : weighted-self-blending => rf(200) + bagging(knn,50)
-------

dataset: ninegrid_xy.txt
feature: all, added hour_circle
validate : 0.6503 0-20%: test ||  20% - end: train
model : weighted-self-blending => rf(200) + bagging(knn,50)
-------
dataset: ninegrid_xy.txt
feature: all, added season
validate : 0.6525 0-20%: test ||  20% - end: train
model : weighted-self-blending => rf(200) + bagging(knn,50)
-------
dataset: ninegrid_xy.txt
feature: all, added season, added hour circle
validate : 0.6516 0-20%: test ||  20% - end: train
model : weighted-self-blending => rf(200) + bagging(knn,50)